#!/usr/bin/env python3
import ipaddress, sys, socket, click, re
from concurrent.futures import ThreadPoolExecutor

# List of CloudFront and Cloudflare CIDR blocks
# https://d7uri8nf7uskq.cloudfront.net/tools/list-cloudfront-ips
CLOUDFRONT_CIDR_BLOCKS = [
    "120.52.22.96/27",
    "205.251.249.0/24",
    "180.163.57.128/26",
    "204.246.168.0/22",
    "111.13.171.128/26",
    "18.160.0.0/15",
    "205.251.252.0/23",
    "54.192.0.0/16",
    "204.246.173.0/24",
    "54.230.200.0/21",
    "120.253.240.192/26",
    "116.129.226.128/26",
    "130.176.0.0/17",
    "108.156.0.0/14",
    "99.86.0.0/16",
    "13.32.0.0/15",
    "120.253.245.128/26",
    "13.224.0.0/14",
    "70.132.0.0/18",
    "15.158.0.0/16",
    "111.13.171.192/26",
    "13.249.0.0/16",
    "18.238.0.0/15",
    "18.244.0.0/15",
    "205.251.208.0/20",
    "3.165.0.0/16",
    "3.168.0.0/14",
    "65.9.128.0/18",
    "130.176.128.0/18",
    "58.254.138.0/25",
    "205.251.201.0/24",
    "205.251.206.0/23",
    "54.230.208.0/20",
    "3.160.0.0/14",
    "116.129.226.0/25",
    "52.222.128.0/17",
    "18.164.0.0/15",
    "111.13.185.32/27",
    "64.252.128.0/18",
    "205.251.254.0/24",
    "3.166.0.0/15",
    "54.230.224.0/19",
    "71.152.0.0/17",
    "216.137.32.0/19",
    "204.246.172.0/24",
    "205.251.202.0/23",
    "18.172.0.0/15",
    "120.52.39.128/27",
    "118.193.97.64/26",
    "3.164.64.0/18",
    "18.154.0.0/15",
    "54.240.128.0/18",
    "205.251.250.0/23",
    "180.163.57.0/25",
    "52.46.0.0/18",
    "52.82.128.0/19",
    "54.230.0.0/17",
    "54.230.128.0/18",
    "54.239.128.0/18",
    "130.176.224.0/20",
    "36.103.232.128/26",
    "52.84.0.0/15",
    "143.204.0.0/16",
    "144.220.0.0/16",
    "120.52.153.192/26",
    "119.147.182.0/25",
    "120.232.236.0/25",
    "111.13.185.64/27",
    "3.164.0.0/18",
    "54.182.0.0/16",
    "58.254.138.128/26",
    "120.253.245.192/27",
    "54.239.192.0/19",
    "18.68.0.0/16",
    "18.64.0.0/14",
    "120.52.12.64/26",
    "99.84.0.0/16",
    "205.251.204.0/23",
    "130.176.192.0/19",
    "52.124.128.0/17",
    "205.251.200.0/24",
    "204.246.164.0/22",
    "13.35.0.0/16",
    "204.246.174.0/23",
    "3.164.128.0/17",
    "3.172.0.0/18",
    "36.103.232.0/25",
    "119.147.182.128/26",
    "118.193.97.128/25",
    "120.232.236.128/26",
    "204.246.176.0/20",
    "65.8.0.0/16",
    "65.9.0.0/17",
    "108.138.0.0/15",
    "120.253.241.160/27",
    "64.252.64.0/18",
    "13.113.196.64/26",
    "13.113.203.0/24",
    "52.199.127.192/26",
    "13.124.199.0/24",
    "3.35.130.128/25",
    "52.78.247.128/26",
    "13.233.177.192/26",
    "15.207.13.128/25",
    "15.207.213.128/25",
    "52.66.194.128/26",
    "13.228.69.0/24",
    "47.129.82.0/24",
    "47.129.83.0/24",
    "47.129.84.0/24",
    "52.220.191.0/26",
    "13.210.67.128/26",
    "13.54.63.128/26",
    "3.107.43.128/25",
    "3.107.44.0/25",
    "3.107.44.128/25",
    "43.218.56.128/26",
    "43.218.56.192/26",
    "43.218.56.64/26",
    "43.218.71.0/26",
    "99.79.169.0/24",
    "18.192.142.0/23",
    "18.199.68.0/22",
    "18.199.72.0/22",
    "18.199.76.0/22",
    "35.158.136.0/24",
    "52.57.254.0/24",
    "18.200.212.0/23",
    "52.212.248.0/26",
    "18.175.65.0/24",
    "18.175.66.0/24",
    "18.175.67.0/24",
    "3.10.17.128/25",
    "3.11.53.0/24",
    "52.56.127.0/25",
    "15.188.184.0/24",
    "52.47.139.0/24",
    "3.29.40.128/26",
    "3.29.40.192/26",
    "3.29.40.64/26",
    "3.29.57.0/26",
    "18.229.220.192/26",
    "18.230.229.0/24",
    "18.230.230.0/25",
    "54.233.255.128/26",
    "3.231.2.0/25",
    "3.234.232.224/27",
    "3.236.169.192/26",
    "3.236.48.0/23",
    "34.195.252.0/24",
    "34.226.14.0/24",
    "44.220.194.0/23",
    "44.220.196.0/23",
    "44.220.198.0/23",
    "44.220.200.0/23",
    "44.220.202.0/23",
    "44.222.66.0/24",
    "13.59.250.0/26",
    "18.216.170.128/25",
    "3.128.93.0/24",
    "3.134.215.0/24",
    "3.146.232.0/22",
    "3.147.164.0/22",
    "3.147.244.0/22",
    "52.15.127.128/26",
    "3.101.158.0/23",
    "52.52.191.128/26",
    "34.216.51.0/25",
    "34.223.12.224/27",
    "34.223.80.192/26",
    "35.162.63.192/26",
    "35.167.191.128/26",
    "35.93.168.0/23",
    "35.93.170.0/23",
    "35.93.172.0/23",
    "44.227.178.0/24",
    "44.234.108.128/25",
    "44.234.90.252/30",
    "130.176.88.0/21",
    "54.239.134.0/23",
    "52.82.134.0/23",
    "130.176.86.0/23",
    "130.176.140.0/22",
    "130.176.0.0/18",
    "54.239.204.0/22",
    "130.176.160.0/19",
    "130.176.136.0/23",
    "54.239.170.0/23",
    "52.46.0.0/22",
    "130.176.96.0/19",
    "54.182.184.0/22",
    "204.246.166.0/24",
    "130.176.64.0/21",
    "54.182.172.0/22",
    "205.251.218.0/24",
    "52.46.4.0/23",
    "130.176.144.0/20",
    "54.182.176.0/21",
    "130.176.78.0/23",
    "54.182.248.0/22",
    "54.182.154.0/23",
    "54.182.144.0/21",
    "54.182.224.0/21",
    "130.176.128.0/21",
    "52.46.32.0/19",
    "52.82.128.0/23",
    "54.182.156.0/22",
    "54.182.160.0/21",
    "54.182.240.0/21",
    "130.176.76.0/24",
    "52.46.16.0/20",
    "54.239.208.0/21",
    "54.182.188.0/23",
    "130.176.80.0/22",
    "54.182.128.0/20",
    "130.176.72.0/22",
]

# https://www.cloudflare.com/ips-v4/
CLOUDFLARE_CIDR_BLOCKS = [
    "103.21.244.0/22",
    "103.22.200.0/22",
    "103.31.4.0/22",
    "104.16.0.0/13",
    "104.24.0.0/14",
    "108.162.192.0/18",
    "131.0.72.0/22",
    "141.101.64.0/18",
    "162.158.0.0/15",
    "172.64.0.0/13",
    "173.245.48.0/20",
    "188.114.96.0/20",
    "190.93.240.0/20",
    "197.234.240.0/22",
    "198.41.128.0/17",
]

IP_PATTERN = re.compile(
    r"\b(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\b"
)
DOMAIN_PATTERN = re.compile(
    r"(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9]"
)

# Network objects from CIDR blocks
NETWORKS = [
    ipaddress.ip_network(cidr, strict=False)
    for cidr in CLOUDFRONT_CIDR_BLOCKS + CLOUDFLARE_CIDR_BLOCKS
]

def is_ip_in_cdn(ip_address):
    """
    Check if the given IP address belongs to the predefined CDN networks.
    """
    ip = ipaddress.ip_address(ip_address)
    return any(ip in network for network in NETWORKS)

def check_domain_cdn_status(domain_name):
    """
    Resolve the domain name to its IP addresses and check each IP address against CDN networks.
    """
    try:
        ips = socket.gethostbyname_ex(domain_name)[2]
        for ip in ips:
            report_cdn_status(is_ip_in_cdn(ip), ip, domain_name)
    except socket.error:
        pass

def check_ip_cdn_status(ip):
    """
    Try to resolve the reverse DNS for the given IP address and check it against CDN networks.
    """
    try:
        domain_name, _, _ = socket.gethostbyaddr(ip)
        report_cdn_status(is_ip_in_cdn(ip), ip, domain_name)
    except socket.error:
        pass

@click.command()
@click.option("-t", "--threads", default=20, help="Number of threads")
def process_input(threads):
    """
    Process input from standard input, determine if each line is an IP or domain,
    and check if it is served through Cloudflare or CloudFront.
    """
    with ThreadPoolExecutor(max_workers=threads) as executor:
        for line in sys.stdin:
            clean_line = line.strip().replace("https://", "").replace("http://", "")
            if IP_PATTERN.fullmatch(clean_line):
                check_ip_cdn_status(clean_line)
            elif DOMAIN_PATTERN.fullmatch(clean_line):
                executor.submit(check_domain_cdn_status, clean_line)
            else:
                print(f"Only IP and Domain Name are supported [{clean_line}]")

def report_cdn_status(is_proxied, ip, domain=None):
    """
    Print the CDN status of the given IP address and/or domain name.
    """
    reset = "\033[0m"
    orange = "\033[33m"
    green = "\033[32m"
    blue = "\033[34m"
    purple = "\033[35m"

    status = f"{orange}ðŸŸ  Proxied{reset}" if is_proxied else f"{green}ðŸŸ¢ Not Proxied{reset}"
    ip_colored = f"{blue}{ip}{reset}"
    if domain:
        domain_colored = f"{purple}{domain}{reset}"
        print(f"{status} [{ip_colored}] [{domain_colored}]")
    else:
        print(f"{status} [{ip_colored}]")

if __name__ == "__main__":
    process_input()
